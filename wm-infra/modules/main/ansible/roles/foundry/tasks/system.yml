- name: "Fetch {{ system.name }}-{{ system.version }}"
  ansible.builtin.get_url:
    url: "{{ system.url.format(**system) }}"
    dest: "{{ system.install_path|default(foundry_modules_path) }}/{{ system.name }}-{{ system.version }}.zip"
    url_username: "{{ system.http_user|default('') }}"
    url_password: "{{ system.http_password|default('') }}"
    force_basic_auth: "{{ system.http_password|default('')|length > 0 }}"
    timeout: 60

- ansible.builtin.slurp:
    src: "{{ '{}/{}/system.json'.format(system.install_path|default(foundry_modules_path), system.name) }}"
  register: system_json
  ignore_errors: yes

- block:
    - ansible.builtin.file:
        path: "{{ system.install_path|default(foundry_modules_path) }}/{{ system.name }}"
        state: absent
  
    - ansible.builtin.file:
        path: "{{ system.install_path|default(foundry_modules_path) }}/{{ system.name }}"
        state: directory
      when: system.rename|default(False) == False

    - name: "Unarchive {{ system.name }}-{{ system.version }}"
      ansible.builtin.unarchive:
        src: "{{ system.install_path|default(foundry_modules_path) }}/{{ system.name }}-{{ system.version }}.zip"
        dest: "{{ system.install_path|default(foundry_modules_path) }}/{{ system.name if not system.rename else '' }}"
        remote_src: yes
        list_files: yes
      register: unarchive_result
      
    - set_fact:
        system_folder: "{{ unarchive_result.files
          | select('match', '.*system.json')
          | first
          | default('')
          | regex_replace('^/*(.*)system.json', '\\1') }}"
      
    - name: "Rename {{ system_folder }} as {{ system.name }}"
      command:
        cmd: "mv {{ system_folder }} {{ system.name }}"
        chdir: "{{ system.install_path|default(foundry_modules_path) }}/"
        creates: "{{ system.name }}"
        removes: "{{ system_folder }}"
      when: system.rename
  when: system_json.failed or (system_json.content|b64decode|from_json|json_query('version') != system.version)