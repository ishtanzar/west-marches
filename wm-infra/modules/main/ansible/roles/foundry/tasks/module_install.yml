- name: "Search for {{ module.name }}/system.json file"
  ansible.builtin.stat:
    path: "{{ '{}/{}/system.json'.format(module.install_path|default(foundry_modules_path), module.name) }}"
  register: system_json_stat

- name: "Search for {{ module.name }}/module.json file"
  ansible.builtin.stat:
    path: "{{ '{}/{}/module.json'.format(module.install_path|default(foundry_modules_path), module.name) }}"
  register: module_json_stat

- name: "Read {{ module.name }} system.json or module.json"
  ansible.builtin.slurp:
    src: "{{ system_json_stat.stat.path if system_json_stat.stat.exists else module_json_stat.stat.path }}"
  register: module_json
  when: system_json_stat.stat.exists or module_json_stat.stat.exists

- block:
    - name: "Current version of {{ module.name }}"
      debug:
        msg: "Current/Expected version: {{ module_json.content|b64decode|from_json|json_query('version') }}/{{ module.version }}"
      when: system_json_stat.stat.exists or module_json_stat.stat.exists

    - name: "Check for existing {{ module.name }}-{{ module.version }}.zip"
      ansible.builtin.stat:
        path: "{{ module.install_path|default(foundry_modules_path) }}/{{ module.name }}-{{ module.version }}.zip"
      register: package_stat
  
    - block:
      - name: "Fetch {{ module.name }}-{{ module.version }}.zip"
        ansible.builtin.get_url:
          url: "{{ module.url.format(**module) }}"
          dest: "{{ module.install_path|default(foundry_modules_path) }}/{{ module.name }}-{{ module.version }}.zip"
          url_username: "{{ module.http_user|default('') }}"
          url_password: "{{ module.http_password|default('') }}"
          force_basic_auth: "{{ module.http_password|default('')|length > 0 }}"
          timeout: 60
      when: package_stat.stat.exists  == False

    - name: "Deleted existing module"
      ansible.builtin.file:
        path: "{{ module.install_path|default(foundry_modules_path) }}/{{ module.name }}"
        state: absent

    - name: "Prepare module folder"
      ansible.builtin.file:
        path: "{{ module.install_path|default(foundry_modules_path) }}/{{ module.name }}"
        state: directory
      when: module.rename|default(False) == False

    - name: "Unarchive {{ module.name }}-{{ module.version }}.zip"
      ansible.builtin.unarchive:
        src: "{{ module.install_path|default(foundry_modules_path) }}/{{ module.name }}-{{ module.version }}.zip"
        dest: "{{ module.install_path|default(foundry_modules_path) }}/{{ module.name if not module.rename|default(False) else '' }}"
        remote_src: yes
        list_files: yes
      register: unarchive_result
      
    - set_fact:
        system_folder: "{{ unarchive_result.files
          | select('match', '.*(module|system).json')
          | first
          | default('')
          | regex_replace('^(?:(.*)/)?(module|system).json', '\\1') }}"
      
    - name: "Rename {{ system_folder }} as {{ module.name }}"
      command:
        cmd: "mv {{ system_folder }} {{ module.name }}"
        chdir: "{{ module.install_path|default(foundry_modules_path) }}/"
        creates: "{{ module.name }}"
        removes: "{{ system_folder }}"
      when: module.rename|default(False) and (system_folder != module.name)

    - name: "Removing {{ unarchive_result.files | first }}"
      ansible.builtin.file:
        path: "{{ module.install_path|default(foundry_modules_path) }}/{{ unarchive_result.files | first }}"
        state: absent
      when: module.rename|default(False) and (system_folder != module.name)
  when: module_json.skipped|default(False) or (module_json.content|b64decode|from_json|json_query('version')|string != module.version)