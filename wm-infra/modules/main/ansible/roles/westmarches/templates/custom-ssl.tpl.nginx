
log_format nginx '\$remote_addr - \$remote_user [\$time_local] '
'"\$request" \$status \$body_bytes_sent \$request_time '
'"\$http_referer" "\$http_user_agent"';

access_log /var/log/nginx/access.log;

proxy_cache_path /var/cache/nginx/proxy_cache levels=1:2 keys_zone=wm_cache:10m max_size=1g;
proxy_cache_valid 5m;

server {
  listen 8080;
  access_log off;

  location = /status {
    stub_status;
    server_tokens on;
  }

  location = /foundry_metrics {
    proxy_pass http://foundry:30000/metrics;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}

server {
  listen 80;
  listen [::]:80;

  server_name "{{ nextcloud_fqdn }}";
  return 301 https://$server_name$request_uri;
}

server {
  listen 443      ssl http2;
  listen [::]:443 ssl http2;
  server_name "{{ nextcloud_fqdn }}";

  # Use Mozilla's guidelines for SSL/TLS settings
  # https://mozilla.github.io/server-side-tls/ssl-config-generator/
  ssl_certificate "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/fullchain.pem";
  ssl_certificate_key "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/privkey.pem";
  ssl_trusted_certificate "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/chain.pem";

  # HSTS settings
  # WARNING: Only add the preload option once you read about
  # the consequences in https://hstspreload.org/. This option
  # will add the domain to a hardcoded list that is shipped
  # in all major browsers and getting removed from this list
  # could take several months.
  #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;

  # set max upload size and increase upload timeout:
  client_max_body_size 512M;
  client_body_timeout 300s;
  fastcgi_buffers 64 4K;

  # Enable gzip but do not remove ETag headers
  gzip on;
  gzip_vary on;
  gzip_comp_level 4;
  gzip_min_length 256;
  gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
  gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

  # Pagespeed is not supported by Nextcloud, so if your server is built
  # with the `ngx_pagespeed` module, uncomment this line to disable it.
  #pagespeed off;

  # HTTP response headers borrowed from Nextcloud `.htaccess`
  add_header Referrer-Policy                      "no-referrer"   always;
  add_header X-Content-Type-Options               "nosniff"       always;
  add_header X-Download-Options                   "noopen"        always;
  add_header X-Frame-Options                      "SAMEORIGIN"    always;
  add_header X-Permitted-Cross-Domain-Policies    "none"          always;
  add_header X-Robots-Tag                         "none"          always;
  add_header X-XSS-Protection                     "1; mode=block" always;

  # Remove X-Powered-By, which is an information leak
  fastcgi_hide_header X-Powered-By;

  # Path to the root of your installation
  root /opt/data/nextcloud;

  # Specify how to handle directories -- specifying `/index.php$request_uri`
  # here as the fallback means that Nginx always exhibits the desired behaviour
  # when a client requests a path that corresponds to a directory that exists
  # on the server. In particular, if that directory contains an index.php file,
  # that file is correctly served; if it doesn't, then the request is passed to
  # the front-end controller. This consistent behaviour means that we don't need
  # to specify custom rules for certain paths (e.g. images and other assets,
  # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus
  # `try_files $uri $uri/ /index.php$request_uri`
  # always provides the desired behaviour.
  index index.php index.html /index.php$request_uri;

  # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
  location = / {
    if ( $http_user_agent ~ ^DavClnt ) {
      return 302 /remote.php/webdav/$is_args$args;
    }
  }

  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  # Make a regex exception for `/.well-known` so that clients can still
  # access it despite the existence of the regex rule
  # `location ~ /(\.|autotest|...)` which would otherwise handle requests
  # for `/.well-known`.
  location ^~ /.well-known {
    # The rules in this block are an adaptation of the rules
    # in `.htaccess` that concern `/.well-known`.

    location = /.well-known/carddav { return 301 /remote.php/dav/; }
    location = /.well-known/caldav  { return 301 /remote.php/dav/; }

    location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
    location /.well-known/pki-validation    { try_files $uri $uri/ =404; }

    # Let Nextcloud's API for `/.well-known` URIs handle all other
    # requests by passing them to the front-end controller.
    return 301 /index.php$request_uri;
  }

  # Rules borrowed from `.htaccess` to hide certain paths from clients
  location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }
  location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)                { return 404; }

  # Ensure this block, which passes PHP files to the PHP process, is above the blocks
  # which handle static assets (as seen below). If this block is not declared first,
  # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
  # to the URI, resulting in a HTTP 500 error response.
  location ~ \.php(?:$|/) {
    # Required for legacy support
    rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy) /index.php$request_uri;

    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
    set $path_info $fastcgi_path_info;

    try_files $fastcgi_script_name =404;

    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param PATH_INFO $path_info;
    fastcgi_param HTTPS on;

    fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
    fastcgi_param front_controller_active true;     # Enable pretty urls
    fastcgi_pass nextcloud:9000;

    fastcgi_intercept_errors on;
    fastcgi_request_buffering off;

    fastcgi_max_temp_file_size 0;
  }

  location ~ \.(?:css|js|svg|gif|png|jpg|ico|wasm|tflite|map)$ {
    try_files $uri /index.php$request_uri;
    expires 6M;         # Cache-Control policy borrowed from `.htaccess`
    access_log off;     # Optional: Don't log access to assets

    location ~ \.wasm$ {
      default_type application/wasm;
    }
  }

  location ~ \.woff2?$ {
    try_files $uri /index.php$request_uri;
    expires 7d;         # Cache-Control policy borrowed from `.htaccess`
    access_log off;     # Optional: Don't log access to assets
  }

  # Rule borrowed from `.htaccess`
  location /remote {
    return 301 /remote.php$request_uri;
  }

  location / {
    try_files $uri $uri/ /index.php$request_uri;
  }
}

server {
  listen 80;
  listen [::]:80;

  server_name "{{ foundry_fqdn }}";
  return 301 https://$server_name$request_uri;
}

server {
  listen 443 ssl;
  listen [::]:443 ssl;

  server_name "api.{{ foundry_fqdn }}";

  ssl_certificate "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/fullchain.pem";
  ssl_certificate_key "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/privkey.pem";
  ssl_trusted_certificate "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/chain.pem";

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_hide_header Access-Control-Allow-Origin;
    add_header Access-Control-Allow-Credentials "true";
    add_header Access-Control-Allow-Origin "$http_origin";

    proxy_pass http://api:3000;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

}

server {
  listen 443 ssl;
  listen [::]:443 ssl;

  server_name "{{ foundry_fqdn }}";

  root /usr/share/nginx/html;

  ssl_certificate "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/fullchain.pem";
  ssl_certificate_key "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/privkey.pem";
  ssl_trusted_certificate "/etc/letsencrypt/live/{{ foundry_fqdn }}-0001/chain.pem";

  location /.well-known {}

  location /metrics {
    return 404;
  }

  location /api {
    return 404;
  }

  location /monitoring {
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_pass http://grafana:3000;
  }

  location /5etools {
    root /opt/data;
  }

  location / {
    proxy_pass http://foundry:30000;

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_http_version 1.1;

    proxy_ignore_headers Cache-Control;
    proxy_hide_header Cache-Control;
    proxy_cache wm_cache;

    add_header Cache-Control "public";
    add_header X-Cache-Status $upstream_cache_status;

    expires 1d;

    if ($request_uri ~ /(game|join)) {
      expires off;
    }
  }

  location ^~ /nextcloud {
    return 301 "https://{{ nextcloud_fqdn }}$request_uri";
  }
}
